package kr.inhatc.spring.friend.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.inhatc.spring.board.dto.BoardDto;
import kr.inhatc.spring.board.service.BoardService;
import kr.inhatc.spring.friend.entity.Friends;
import kr.inhatc.spring.friend.service.FriendService;

@Controller
public class FriendController {
	private Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private FriendService friendService;

	
	@Autowired
	private PasswordEncoder encoder;
	
	
	// GET = 읽기(read), POST = 생성(create), PUT = 업데이트(update), DELETE = 삭제(delete) . 레스트 풀 서비스
	@RequestMapping(value = "/friend/friendList", method = RequestMethod.GET)
	public String friendList(Model model) {
		List<Friends> list = friendService.friendList();
		System.out.println("================================> 크기 : " + list.size());
		System.out.println(list.get(0));
		model.addAttribute("list", list);
		return "friend/friendList"; 
	}
	
	@RequestMapping(value = "/friend/friendInsert", method = RequestMethod.GET)
	public String userWrite(Model model) {
		List<String> enabledList = new ArrayList<>();
		enabledList.add("가 능");
		enabledList.add("불 가 능");
		
		List<String> authorityList = new ArrayList<>();
		authorityList.add("ROLE_GUEST");
		authorityList.add("ROLE_MEMBER");
		authorityList.add("ROLE_ADMIN");
		
		Map<String, List<String>> map = new HashMap<>();
		map.put("enabledList", enabledList);
		map.put("authorityList", authorityList);
		
		model.addAttribute("map", map);
		
		return "friend/friendWrite"; 
	}
	
	@RequestMapping(value = "/friend/userInsert", method = RequestMethod.POST)
	public String userInsert(Friends user) {
		if(user != null) {
			System.out.println("변경 전 : " + user.getPw());
			String pw = encoder.encode(user.getPw());
			System.out.println("변경 후 : " + pw);
			user.setPw(pw);
			friendService.saveUsers(user);
		}
		
		return "redirect:/friend/userList";
	}
	
	@RequestMapping(value = "/friend/friendDetail/{id}", method = RequestMethod.GET)
	public String userDetail(@PathVariable("id") String id, Model model) {
		Friends user = friendService.friendDetail(id);	
		model.addAttribute("friend", friend);
		System.out.println("==================> : " + friend);
		return "friend/userDetail";
	}
	
	@RequestMapping(value = "/friend/userUpdate/{id}", method = RequestMethod.POST)
	public String userUpdate(@PathVariable("id") String id, Friends friend) {
		friend.setId(id);
		friendService.saveUsers(friend);
		return "redirect:/friend/friendList";
	}
	
	
	@RequestMapping(value = "/friend/friendDelete/{id}", method = RequestMethod.GET)
	public String userDelete(@PathVariable("id") String id) {
		friendService.friendDelete(id);
		return "redirect:/friend/friendList";
	}
}
